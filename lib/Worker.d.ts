import { EnhancedEventEmitter } from 'mediasoup-client/src/EnhancedEventEmitter';
import { MediaKind } from 'mediasoup-client/src/RtpParameters';
import { FakeRTCStatsReport } from './FakeRTCStatsReport';
export declare type WorkerLogLevel = 'debug' | 'warn' | 'error' | 'none';
export declare type WorkerSettings = {
    /**
     * RTCConfiguration object.
     */
    rtcConfiguration?: RTCConfiguration;
    /**
     * Logging level for logs generated by the media worker subprocesses. Valid
     * values are 'debug', 'warn', 'error' and 'none'. Default 'none'.
     */
    logLevel?: WorkerLogLevel;
};
export declare type WorkerState = 'connecting' | 'open' | 'closed';
export declare type WorkerSendOptions = {
    kind: MediaKind;
    sourceType: 'device' | 'file' | 'url';
    sourceValue?: string;
};
declare type WorkerSendResult = {
    trackId: string;
};
export declare class Worker extends EnhancedEventEmitter {
    private _child?;
    private readonly _pid;
    private readonly _channel;
    private _state;
    /**
     * @emits open
     * @emits failed - (error: Error)
     * @emits error - (error: Error)
     */
    constructor({ rtcConfiguration, logLevel }?: WorkerSettings);
    /**
     * Worker process identifier (PID).
     */
    readonly pid: number;
    /**
     * Close the Worker.
     */
    close(): void;
    /**
     * Dump Worker.
     */
    dump(): Promise<any>;
    getState(): WorkerState;
    getRtpCapabilities(): Promise<string>;
    getLocalDescription(): Promise<RTCSessionDescription>;
    setLocalDescription(desc: RTCSessionDescription): Promise<void>;
    setRemoteDescription(desc: RTCSessionDescription): Promise<void>;
    createOffer({ iceRestart }?: RTCOfferOptions): Promise<RTCSessionDescription>;
    createAnswer(): Promise<RTCSessionDescription>;
    addTrack(options: WorkerSendOptions): Promise<WorkerSendResult>;
    removeTrack(trackId: string): Promise<void>;
    getMid(trackId: string): Promise<string | undefined>;
    enableTrack(trackId: string): void;
    disableTrack(trackId: string): void;
    getTransportStats(): Promise<FakeRTCStatsReport>;
    getSenderStats(trackId: string): Promise<FakeRTCStatsReport>;
    getReceiverStats(trackId: string): Promise<FakeRTCStatsReport>;
}
export {};
//# sourceMappingURL=Worker.d.ts.map